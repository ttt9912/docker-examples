#
# Orchestrate Spring Boot App & Postgres DB
# Postgres DB uses a volume to persist runtime data
#

# compose.yml file - spring boot app
- service:      is similar to container
- build:        points to spring boot apps Dockerfile
- depends_on:   start DB server first
- ports:        publish ports - alternative to -p


# compose.yml file - Postgres server
- container_name:   represents host name and can be accessed
                    (e.g. via postgre-db:5432/springbootdb)
- expose:       documentation purpose only - spring boot app could
                also access the db without expose if in the same network
                no port forwarding via docker machine here (not accessible from outside)
- volumes:      mount volume 'db-data' into container directory '/var/lib/postgresql/data'
- environment:  optional parameters - let PostgreSQL-Server create DB 'springbootdb'


# Persist postgres data
postgres container uses a volume


# Expose and publish ports
--expose    expose a port or a range of ports inside the container
-P          publish all exposed ports to the host interfaces
-p          publish a container's specific port or a range of ports to the host


# Create images and run containers
> docker-compose up


# Stop cluster, shutdown containers
> docker-compose down


# Open Browser
http://localhost:8081/api/entries
(or maybe use docker machine ip instead of localhost?)


